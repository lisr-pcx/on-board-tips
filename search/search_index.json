{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OnBoardTips A personal collection of resources, links, notes, and training materials. All credits to people and web communities who provide free and public information. The site was initially built around C++ but in fact most of the concepts are not specific to this language. Thanks to: MT, FL, BD, ST, GI, LM Reviews and feedbacks are welcome. Full site is available on GitHub Note Work in progress, last update: September 2025 Warning Some information are older than six years now. I keep for reference but probably do not reflect my current knowledge and beliefs.","title":"Welcome"},{"location":"#welcome-to-onboardtips","text":"A personal collection of resources, links, notes, and training materials. All credits to people and web communities who provide free and public information. The site was initially built around C++ but in fact most of the concepts are not specific to this language. Thanks to: MT, FL, BD, ST, GI, LM Reviews and feedbacks are welcome. Full site is available on GitHub Note Work in progress, last update: September 2025 Warning Some information are older than six years now. I keep for reference but probably do not reflect my current knowledge and beliefs.","title":"Welcome to OnBoardTips"},{"location":"about/","text":"About (kind of) Embedded Software Developer. In the last 6 years I worked as software consultant (EU market) on railway onboard/signalling devices, developing solutions in ADA and C++ language mainly on legacy codebases. Be humble, try stuff, have fun!","title":"About"},{"location":"about/#about","text":"(kind of) Embedded Software Developer. In the last 6 years I worked as software consultant (EU market) on railway onboard/signalling devices, developing solutions in ADA and C++ language mainly on legacy codebases. Be humble, try stuff, have fun!","title":"About"},{"location":"analysis_and_design/","text":"Analysis and Design (under construction) Links Empty link","title":"Analysis and Design"},{"location":"analysis_and_design/#analysis-and-design","text":"(under construction)","title":"Analysis and Design"},{"location":"analysis_and_design/#links","text":"Empty link","title":"Links"},{"location":"basics_c_cpp/","text":"Basics Before start just get a quick bite of the topic. This tip is valid for any kind of technology, feature, framework .. at beginning you just want some highlights and try some live examples when available. Videos and articles are a good source of information. At this stage do not be afraid to jump from link to link. C in 100 seconds C++ in 100 seconds After that it's time to acquire some core concepts and build simple stuff. Essentially there are three different ways for learning: Books and Docs : gradually discover chapter by chapter, guided by authors Videos (lessons, seminaries) : concepts are explained putting more emphasis on schemes, flowcharts, ... and live examples Doing (small project, tutorial) : try to build up something, gettin the knownledge on your specific needs (learn by mistakes) Choose your preferred path or mix them according to your goal. Some people are confortable gettin the theory first, and then process all the information before start coding. Other people instead go straight to the action \"hammering the code\" until they get some results, and then they explore all the concepts and layers behind. I suggest to setup your dev enviroinment (IDE, editor, toolchain...) and try the code snippets proposed time to time. A good balance between theory and practice is the key. Give yourself some time in between the arguments, sometimes it's good to keep a slower pace. I found the websites \"ByExample\" quite effective because they give you the classic index of topics to acquire. Only a small snippet of code is showed, forcing the reader to actively retrieve via other sources the theory behind. C/C++ by example Another C++ By Example site Books and documentation TODO Video lessons TODO Small projects and tutorials \"Learn by doing\" is good philosophy, anyway make sure to know some basic stuffs or it could became a mere \"copy and paste\" routine. TODO References ISO C++ Core Guidelines Tools Compiler Explorer : interactive online tool that lets you type code in one window and see the results of its compilation in another window.","title":"Basics"},{"location":"basics_c_cpp/#basics","text":"Before start just get a quick bite of the topic. This tip is valid for any kind of technology, feature, framework .. at beginning you just want some highlights and try some live examples when available. Videos and articles are a good source of information. At this stage do not be afraid to jump from link to link. C in 100 seconds C++ in 100 seconds After that it's time to acquire some core concepts and build simple stuff. Essentially there are three different ways for learning: Books and Docs : gradually discover chapter by chapter, guided by authors Videos (lessons, seminaries) : concepts are explained putting more emphasis on schemes, flowcharts, ... and live examples Doing (small project, tutorial) : try to build up something, gettin the knownledge on your specific needs (learn by mistakes) Choose your preferred path or mix them according to your goal. Some people are confortable gettin the theory first, and then process all the information before start coding. Other people instead go straight to the action \"hammering the code\" until they get some results, and then they explore all the concepts and layers behind. I suggest to setup your dev enviroinment (IDE, editor, toolchain...) and try the code snippets proposed time to time. A good balance between theory and practice is the key. Give yourself some time in between the arguments, sometimes it's good to keep a slower pace. I found the websites \"ByExample\" quite effective because they give you the classic index of topics to acquire. Only a small snippet of code is showed, forcing the reader to actively retrieve via other sources the theory behind. C/C++ by example Another C++ By Example site","title":"Basics"},{"location":"basics_c_cpp/#books-and-documentation","text":"TODO","title":"Books and documentation"},{"location":"basics_c_cpp/#video-lessons","text":"TODO","title":"Video lessons"},{"location":"basics_c_cpp/#small-projects-and-tutorials","text":"\"Learn by doing\" is good philosophy, anyway make sure to know some basic stuffs or it could became a mere \"copy and paste\" routine. TODO","title":"Small projects and tutorials"},{"location":"basics_c_cpp/#references","text":"ISO C++ Core Guidelines","title":"References"},{"location":"basics_c_cpp/#tools","text":"Compiler Explorer : interactive online tool that lets you type code in one window and see the results of its compilation in another window.","title":"Tools"},{"location":"code_reviews/","text":"Code Reviews The term is used to identify all the activities of code analysis with the goal to identify bugs, non conformities and design flaws. After the review the code changes are usually merged with the official codebase and/or delivered to final users. This process can be formal or informal, but in any case it is suggested to follow some guidelines (create them if not defined). Technically there are multiple way to perform a review: email thread, company templates (word, excel), tools-assisted (Git cloud web services). Keep in mind that for new developers the code review can be a way to discover and understand the sw architecture and the sourcecode. During a review these aspect shall be considered: coding style (use sw tools for checking) coding rules safety and defensive code sw requirements logic, algorithms, and code flow design and architecture (flexibility and mantenibility) Code reviews are not an exam, the scope is to check the code not the programmer who wrote it. Do not set or perceive code reviews as a personal attack. The reviewer wants the same as you: creating high-quality software, you are both on the same side. Rules for the programmer Have an open and humble mindset about the feedback you are going to receive. Mind that code can be improved You are not perfect. Accept that you will make mistakes Don\u2019t infer your professionalism and reliability as a software developer from infallibility and flawlessness of your code Mind the IKEA effect. You might place a too high value on your own code Consider feedback as a valuable new perspective on your code (avoids a tunnel vision) Code reviews are a valuable source of best practices and experiences. Code reviews are a discussion, not a dictation. It\u2019s fine to disagree, but you have to elaborate your reservations politely and be willing to make compromises. Rules for the reviewer For the reviewer, it\u2019s important to pay attention to the way they formulate the feedback . This is extremely crucial for your feedback to be accepted. Use I-messages: Right: \u201cIt\u2019s hard for me to grasp what\u2019s going on in this code.\u201d Wrong: \u201cYou are writing cryptic code.\u201d Talk about the code, not the coder. Right: \u201cThis code is requesting the service multiple times, which is inefficient.\u201d Wrong: \u201cYou\u2019re requesting the service multiple times, which is inefficient.\u201d Ask questions instead of making statements. Right: \u201cWhat do you think about the name \u2018userId\u2019 for this variable?\u201d Wrong: \u201cThis variable should have the name \u2018userId\u2019.\u201d Always refer to the behavior, not the traits of the author. Right: \u201cI believe that you should pay more attention to writing tests.\u201d Wrong: \u201cYou are sloppy when it comes to writing tests.\u201d Accept that there are different solutions Right: \u201cI would do it in another way, but your solution is also fine.\u201d Wrong: \u201cI always do it this way and you should too.\u201d Distinguish between common best practices and your personal taste. Mind that your criticism may just reflect your personal taste and not an objectively wrong code. Make compromises and be pragmatic. Don\u2019t jump in front of every train Don\u2019t be a pedant. Don\u2019t criticize every single line in the code. This will annoy the author and reduce their openness to further feedback. Focus on the flaws and code smells that are most important to you. Respect and trust the author Nobody writes bad code on purpose. The author wrote the code to the best of their knowledge and belief. Mind the OIR rule of giving feedback Observation: \u201cThis method has 100 lines.\u201d Impact: \u201cThis makes it hard for me to grasp the essential logic of this method.\u201d Request: \u201cI suggest extracting the low-level-details into subroutines and give them expressive names.\u201d Before giving feedback, ask yourself: Is it true? (opinion != truth) Is it necessary? (avoid nagging, unnecessary comments and out-of-scope work) Is it kind? (no shaming) Be humble! You are not perfect and you can also improve. It\u2019s fine to say: Everything is good! Don\u2019t forget to praise. Links Google code review overview Guidelines for better, faster pull request reviews Curated list of resources about code reviews Awesome list of code review resources Michael Lynch post","title":"Code reviews"},{"location":"code_reviews/#code-reviews","text":"The term is used to identify all the activities of code analysis with the goal to identify bugs, non conformities and design flaws. After the review the code changes are usually merged with the official codebase and/or delivered to final users. This process can be formal or informal, but in any case it is suggested to follow some guidelines (create them if not defined). Technically there are multiple way to perform a review: email thread, company templates (word, excel), tools-assisted (Git cloud web services). Keep in mind that for new developers the code review can be a way to discover and understand the sw architecture and the sourcecode. During a review these aspect shall be considered: coding style (use sw tools for checking) coding rules safety and defensive code sw requirements logic, algorithms, and code flow design and architecture (flexibility and mantenibility) Code reviews are not an exam, the scope is to check the code not the programmer who wrote it. Do not set or perceive code reviews as a personal attack. The reviewer wants the same as you: creating high-quality software, you are both on the same side.","title":"Code Reviews"},{"location":"code_reviews/#rules-for-the-programmer","text":"Have an open and humble mindset about the feedback you are going to receive. Mind that code can be improved You are not perfect. Accept that you will make mistakes Don\u2019t infer your professionalism and reliability as a software developer from infallibility and flawlessness of your code Mind the IKEA effect. You might place a too high value on your own code Consider feedback as a valuable new perspective on your code (avoids a tunnel vision) Code reviews are a valuable source of best practices and experiences. Code reviews are a discussion, not a dictation. It\u2019s fine to disagree, but you have to elaborate your reservations politely and be willing to make compromises.","title":"Rules for the programmer"},{"location":"code_reviews/#rules-for-the-reviewer","text":"For the reviewer, it\u2019s important to pay attention to the way they formulate the feedback . This is extremely crucial for your feedback to be accepted. Use I-messages: Right: \u201cIt\u2019s hard for me to grasp what\u2019s going on in this code.\u201d Wrong: \u201cYou are writing cryptic code.\u201d Talk about the code, not the coder. Right: \u201cThis code is requesting the service multiple times, which is inefficient.\u201d Wrong: \u201cYou\u2019re requesting the service multiple times, which is inefficient.\u201d Ask questions instead of making statements. Right: \u201cWhat do you think about the name \u2018userId\u2019 for this variable?\u201d Wrong: \u201cThis variable should have the name \u2018userId\u2019.\u201d Always refer to the behavior, not the traits of the author. Right: \u201cI believe that you should pay more attention to writing tests.\u201d Wrong: \u201cYou are sloppy when it comes to writing tests.\u201d Accept that there are different solutions Right: \u201cI would do it in another way, but your solution is also fine.\u201d Wrong: \u201cI always do it this way and you should too.\u201d Distinguish between common best practices and your personal taste. Mind that your criticism may just reflect your personal taste and not an objectively wrong code. Make compromises and be pragmatic. Don\u2019t jump in front of every train Don\u2019t be a pedant. Don\u2019t criticize every single line in the code. This will annoy the author and reduce their openness to further feedback. Focus on the flaws and code smells that are most important to you. Respect and trust the author Nobody writes bad code on purpose. The author wrote the code to the best of their knowledge and belief. Mind the OIR rule of giving feedback Observation: \u201cThis method has 100 lines.\u201d Impact: \u201cThis makes it hard for me to grasp the essential logic of this method.\u201d Request: \u201cI suggest extracting the low-level-details into subroutines and give them expressive names.\u201d Before giving feedback, ask yourself: Is it true? (opinion != truth) Is it necessary? (avoid nagging, unnecessary comments and out-of-scope work) Is it kind? (no shaming) Be humble! You are not perfect and you can also improve. It\u2019s fine to say: Everything is good! Don\u2019t forget to praise.","title":"Rules for the reviewer"},{"location":"code_reviews/#links","text":"Google code review overview Guidelines for better, faster pull request reviews Curated list of resources about code reviews Awesome list of code review resources Michael Lynch post","title":"Links"},{"location":"constants/","text":"Constants Basically there are two ways ( keywords ) to manage it: const it applies to variables and objects and prevents them from being modified in the code. It allows you to communicate to both compilers and other programmers that a value should remain invariant. Link constexpr tell to the compiler to evaluate the variable or the expression at compile time. It's typically used to assign constant variables, array sizes, and store them into read-only memory. Link const Google C++ guidelines: link Abseil Tip of the Week about const: link int main() { int arr[] = {1, 2, 3, 4}; int val = 25; // Tip(!) // Read from right to left (following the rule that // const always follows the object it's describing...) // pointers int * a = arr; a++; // valid *a = 20; // valid int const * b = arr; b++; // valid *b = 20; // ERROR int * const c = arr; c++; // ERROR *c = 20; // valid int const * const d = arr; d++; // ERROR *d = 20; // ERROR int * p1 = &val; int const * p2 = p1; // valid int * p3 = p2; // ERROR const-ness can not be removed int * const p4 = p1; // valid // references int & r1 = val; int const & r2 = r1; // valid int & r3 = r2; // ERROR const-ness can not be removed int & const r4 = r1 // ERROR const-ness can not be added to ref. return 0; } constexpr, constinit, consteval Google C++ guidelines: link Some variables can be declared constexpr to indicate the variables are true constants, i.e., fixed at compilation/link time. Some functions and constructors can be declared constexpr which enables them to be used in defining a constexpr variable. Functions can be declared consteval to restrict their use to compile time. Use constexpr to specify true constants (fixed at compilation time). Also functions can be declared as constexpr and if it's not possible to evaluate at compile time they will managed as normal functions at run-time. Use constinit to ensure constant initialization for non-constant variables. Use consteval only for compile time. Video / Conferences CppCon 2015: Richard Powell \u201cThe Importance of Being const\" CppCon 2021: Jason Turner \"Your New Mental Model of constexpr\" Back to Basics: const and constexpr - Rainer Grimm - CppCon 2021 Links Stackoverflow Post Medium \"Understanding the power of constexpr\"","title":"Constants"},{"location":"constants/#constants","text":"Basically there are two ways ( keywords ) to manage it: const it applies to variables and objects and prevents them from being modified in the code. It allows you to communicate to both compilers and other programmers that a value should remain invariant. Link constexpr tell to the compiler to evaluate the variable or the expression at compile time. It's typically used to assign constant variables, array sizes, and store them into read-only memory. Link","title":"Constants"},{"location":"constants/#const","text":"Google C++ guidelines: link Abseil Tip of the Week about const: link int main() { int arr[] = {1, 2, 3, 4}; int val = 25; // Tip(!) // Read from right to left (following the rule that // const always follows the object it's describing...) // pointers int * a = arr; a++; // valid *a = 20; // valid int const * b = arr; b++; // valid *b = 20; // ERROR int * const c = arr; c++; // ERROR *c = 20; // valid int const * const d = arr; d++; // ERROR *d = 20; // ERROR int * p1 = &val; int const * p2 = p1; // valid int * p3 = p2; // ERROR const-ness can not be removed int * const p4 = p1; // valid // references int & r1 = val; int const & r2 = r1; // valid int & r3 = r2; // ERROR const-ness can not be removed int & const r4 = r1 // ERROR const-ness can not be added to ref. return 0; }","title":"const"},{"location":"constants/#constexpr-constinit-consteval","text":"Google C++ guidelines: link Some variables can be declared constexpr to indicate the variables are true constants, i.e., fixed at compilation/link time. Some functions and constructors can be declared constexpr which enables them to be used in defining a constexpr variable. Functions can be declared consteval to restrict their use to compile time. Use constexpr to specify true constants (fixed at compilation time). Also functions can be declared as constexpr and if it's not possible to evaluate at compile time they will managed as normal functions at run-time. Use constinit to ensure constant initialization for non-constant variables. Use consteval only for compile time.","title":"constexpr, constinit, consteval"},{"location":"constants/#video-conferences","text":"CppCon 2015: Richard Powell \u201cThe Importance of Being const\" CppCon 2021: Jason Turner \"Your New Mental Model of constexpr\" Back to Basics: const and constexpr - Rainer Grimm - CppCon 2021","title":"Video / Conferences"},{"location":"constants/#links","text":"Stackoverflow Post Medium \"Understanding the power of constexpr\"","title":"Links"},{"location":"debugging/","text":"Debugging Developers spend a considerable amount of time looking what's going wrong on running code. Learn where to look and how to do it is a basic skill of the job. A software bug is a defect in the logic, correctness, or performance of a software system. The program compile but it does not do at runtime what the developer expects (logic) The program executes the right path but produces the wrong result (correctness) When dependent on workload or external system/architecture (performance) When occur in concurrent code and are sporadically observable (non deterministic) Debugging is closely related to testing. Testing means we are checking for the presence of a bug, debugging is the process of removing an observed fault in software, and both are essential skills to learn. Overview The following links guide step by step into the argument: Syntax and Semantics Erros The process Strategy Basic More Debugger tool: stepping Debugger tool: breakpoints Debugger tool: watch variables Debugger tool: call stack Finding issues Strategies Work experience and practice will improve your skills, but in the meantime apply any kind of tricks usefull for your scenario. (1) Scan and Look Have a look and follow intuition (senior developers get best result compared to junior) #include <iostream> int main(){ int PI = 3.1415; // <- BUG logical error/typo std::cout << \"Value of PI is \" << PI << std::endl; return 0; } Tip Add these flag to the compiler -Wall and -Wextra in order to catch these kind of errors. (2) Printf debugging Print some values at a particular point of source code to discover the current state of the program #include <iostream> #include <stdlib.h> int square(int a){ return a; // <- BUG logical } int main(){ while(1){ std::cout << \"dbg out 1: \" << square(5) << std::endl; if(square(5)==25) { std::cout << \"dbg out 2: \" << square(5) << std::endl; exit(1); } std::cout << \"dbg out 3: \" << square(5) << std::endl; } std::cout << \"Exiting program\\n\"; return 0; } Tip Be aware that on embedded systems adding a lot of printf can affect performance and behavior. (3) Delta debugging Don't analyze everything but isolate and check in a kind of way as binary search. Tip Verify which functions and code sections are running before analyze code, have a look (and knownledge) of the call stack. Links Bob Steagall, CppCon 2021, Debugging Techniques Mike Shah, CppCon 2022, Debugging in C++ Debugging with GDB: the GNU Source-Level Debugger","title":"Debugging"},{"location":"debugging/#debugging","text":"Developers spend a considerable amount of time looking what's going wrong on running code. Learn where to look and how to do it is a basic skill of the job. A software bug is a defect in the logic, correctness, or performance of a software system. The program compile but it does not do at runtime what the developer expects (logic) The program executes the right path but produces the wrong result (correctness) When dependent on workload or external system/architecture (performance) When occur in concurrent code and are sporadically observable (non deterministic) Debugging is closely related to testing. Testing means we are checking for the presence of a bug, debugging is the process of removing an observed fault in software, and both are essential skills to learn.","title":"Debugging"},{"location":"debugging/#overview","text":"The following links guide step by step into the argument: Syntax and Semantics Erros The process Strategy Basic More Debugger tool: stepping Debugger tool: breakpoints Debugger tool: watch variables Debugger tool: call stack Finding issues","title":"Overview"},{"location":"debugging/#strategies","text":"Work experience and practice will improve your skills, but in the meantime apply any kind of tricks usefull for your scenario.","title":"Strategies"},{"location":"debugging/#1-scan-and-look","text":"Have a look and follow intuition (senior developers get best result compared to junior) #include <iostream> int main(){ int PI = 3.1415; // <- BUG logical error/typo std::cout << \"Value of PI is \" << PI << std::endl; return 0; } Tip Add these flag to the compiler -Wall and -Wextra in order to catch these kind of errors.","title":"(1) Scan and Look"},{"location":"debugging/#2-printf-debugging","text":"Print some values at a particular point of source code to discover the current state of the program #include <iostream> #include <stdlib.h> int square(int a){ return a; // <- BUG logical } int main(){ while(1){ std::cout << \"dbg out 1: \" << square(5) << std::endl; if(square(5)==25) { std::cout << \"dbg out 2: \" << square(5) << std::endl; exit(1); } std::cout << \"dbg out 3: \" << square(5) << std::endl; } std::cout << \"Exiting program\\n\"; return 0; } Tip Be aware that on embedded systems adding a lot of printf can affect performance and behavior.","title":"(2) Printf debugging"},{"location":"debugging/#3-delta-debugging","text":"Don't analyze everything but isolate and check in a kind of way as binary search. Tip Verify which functions and code sections are running before analyze code, have a look (and knownledge) of the call stack.","title":"(3) Delta debugging"},{"location":"debugging/#links","text":"Bob Steagall, CppCon 2021, Debugging Techniques Mike Shah, CppCon 2022, Debugging in C++ Debugging with GDB: the GNU Source-Level Debugger","title":"Links"},{"location":"defensive_programming/","text":"Defensive programming It's a form of defensive design intended to develop programs that are capable of detecting potential security anomalies and make predetermined responses. It ensures the continuing function of a piece of software under unforeseen circumstances. These practices are often used where high availability, safety, or security is needed. (source: Wikipedia) The final goal is to improve software and source code, in terms of: Quality, reducing the number of software bugs and problems Readability Making the software behave in a predictable manner despite unexpected inputs or user actions. Overly defensive programming, however, may safeguard against errors that will never be encountered, thus incurring run-time and maintenance costs. A complete overview of the topic can be found here A collection of tips from Red Hat Defensive coding guide, multiple languages Guidelines and certification: SEI-CERT standards","title":"Defensive programming"},{"location":"defensive_programming/#defensive-programming","text":"It's a form of defensive design intended to develop programs that are capable of detecting potential security anomalies and make predetermined responses. It ensures the continuing function of a piece of software under unforeseen circumstances. These practices are often used where high availability, safety, or security is needed. (source: Wikipedia) The final goal is to improve software and source code, in terms of: Quality, reducing the number of software bugs and problems Readability Making the software behave in a predictable manner despite unexpected inputs or user actions. Overly defensive programming, however, may safeguard against errors that will never be encountered, thus incurring run-time and maintenance costs. A complete overview of the topic can be found here A collection of tips from Red Hat Defensive coding guide, multiple languages Guidelines and certification: SEI-CERT standards","title":"Defensive programming"},{"location":"embedded/","text":"Work on Embedded Devices TODO Overview and information. Embedded Linux Systems TODO Books Elecia White Making Embedded Systems O\u2019Reilly, 2011 Links Fundamentals of Embedded Linux, Chris Simmons","title":"Embedded Systems"},{"location":"embedded/#work-on-embedded-devices","text":"TODO Overview and information.","title":"Work on Embedded Devices"},{"location":"embedded/#embedded-linux-systems","text":"TODO","title":"Embedded Linux Systems"},{"location":"embedded/#books","text":"Elecia White Making Embedded Systems O\u2019Reilly, 2011","title":"Books"},{"location":"embedded/#links","text":"Fundamentals of Embedded Linux, Chris Simmons","title":"Links"},{"location":"empty/","text":"Empty page (under construction)","title":"Empty page"},{"location":"empty/#empty-page","text":"(under construction)","title":"Empty page"},{"location":"git_basics/","text":"Git basics Three good reasons for using a version control software on daily basis: backup of your source code keep track of code changes (history) force to apply a workflow when working in team Choose the tool that best fits your habits. I suggest Git because it's widely used, powerful, and easy to integrate on most IDE. There are also a lot of website that offer free online storage for your git repository projects. Overview Official site here: Git Another good source of information can be the Atlassian software development portal: Getting Git Right Git permits different workflows based on the way branches are organized. A common approach is named Gitflow , typically each company adapt these guidelines on their specific projects. Some personal notes when defining workflow, branches, operations: Think about team size and member's expertise Conflicts issues during pull/merge request must be resolved in a short time Create new branches is cheap operation on git Frequent commits Push daily (means backup on remote server) Learn it via bash then go for GUI Installation Download and run the Installer . Then configure your local account: git config --global user.name \u201cYOUR USERNAME\u201d git config --global user.email \u201cYOUREMAILADDRESS@EXAMPLE.COM\u201d Check your current configuration: git config --global --list Remote and local repo Most of the time you will contribute to an existing project. The first step is to get a local copy of the sourcecode from the repository (remote server). git clone <put here URL of repository> Be aware that hidden folder \".git\" contains information and history of the repository. Don't delete it and don't edit the content. Daily operations Pull Keep your local branches synchronized, run the git pull command in order to fetch and download content from remote repository. git pull git pull <put here URL of repository> git pull --verbose Branch and Checkout Before changing anything on your local copy make sure you are working on the right branch, list them: git branch git branch --list To create a local branch: git branch <put here name> To create a remote branch: git remote add <remote branch name> <put here URL of repository> Change (local) current working branch using: git checkout <put here branch name> Status, Add and Commit Be familiar with the concept of staging area , and verify the current status with: git status Then add files and changes you want to commit via: git add <filename> git add <directory> git add -u <- stage modified and deleted files only (already part of the index) git add . <- stage all files in the entire repository Finally create a snapshot of these changes, it will be available in the history of commits of the branch. git commit -m \"commit short description\" git commit I strongly suggest to use git commit , in order to open the predefined editor and write a complete description of the changes, including: First line: short and clear headline Second line: always empty Third line and others: all useful information Please list the missing features (still ongoing or todo) Add guidelines to compile the project, test it, and run simulations Put notes for the \"you from the future\" Some tips are available here . When closing the editor the commit will be automatically done. Check the history via: git log --oneline git log -p <commit A sha> <commit B sha> git show <commit sha> git show <commit sha> --stat git show <commit sha>:filepathname > filepathname_of_the_copy If you want to get rid of all your changes (staged and not) and go back to the last commit use: git reset --hard Push Upload your local repository content to the remote one, via git push command: git push git push <remote branch name> If you want to configure a relationship between your local branch and a remote one proceed as: git checkout <local branch> git branch --set-upstream-to=<remote repo/branch> git branch -vv Funny, but think about it... Stash Sometimes you have to switch quickly to other branches (to fix a bug or check something ... ) but git can't switch branches if there are changes pending on your current branch. At the same time you don't want to clone another repo or worst to loose your current sourcecode. The git stash command can help you, temporary storing your code changes. Then they can be retrieved any time in the future. Please read here . Files management There are some files you may want Git to ignore and not track in your repository. These include many that are auto-generated (by IDE) or platform-specific, as well as other local configuration files or compiled code (.elf .exe .bin). To do that create a hidden file name \".gitignore\" and edit putting inside all folders and name files that you want to ignore. Please note that multiple .gitgnore files can be created inside each project folder for better filter granularity. Here some templates Example for Atmel embedded project: ## Ignore Atmel Studio temporary files and build results # Atmel Studio is powered by an older version of Visual Studio, # so most of the project and solution files are the same as VS files, # only prefixed by an `at`. #Build Directories [Dd]ebug/ [Rr]elease/ #Build Results *.o *.d *.eep *.elf *.hex *.map *.srec #User Specific Files *.atsuo Other files are usually part of the repository: README.md Short project info, installation and configuration, sw architecture, and notes. CONTRIBUTE.md Guideline for contributing to the project. LICENSE.md Software license information Links Git guide from Github platform Gitflow in 5 minutes Git tutorial from freeCodeCamp.org Third-party Git GUI clients: Tortoise Git , GitHub Desktop , Sourcetree","title":"Git basics"},{"location":"git_basics/#git-basics","text":"Three good reasons for using a version control software on daily basis: backup of your source code keep track of code changes (history) force to apply a workflow when working in team Choose the tool that best fits your habits. I suggest Git because it's widely used, powerful, and easy to integrate on most IDE. There are also a lot of website that offer free online storage for your git repository projects.","title":"Git basics"},{"location":"git_basics/#overview","text":"Official site here: Git Another good source of information can be the Atlassian software development portal: Getting Git Right Git permits different workflows based on the way branches are organized. A common approach is named Gitflow , typically each company adapt these guidelines on their specific projects. Some personal notes when defining workflow, branches, operations: Think about team size and member's expertise Conflicts issues during pull/merge request must be resolved in a short time Create new branches is cheap operation on git Frequent commits Push daily (means backup on remote server) Learn it via bash then go for GUI","title":"Overview"},{"location":"git_basics/#installation","text":"Download and run the Installer . Then configure your local account: git config --global user.name \u201cYOUR USERNAME\u201d git config --global user.email \u201cYOUREMAILADDRESS@EXAMPLE.COM\u201d Check your current configuration: git config --global --list","title":"Installation"},{"location":"git_basics/#remote-and-local-repo","text":"Most of the time you will contribute to an existing project. The first step is to get a local copy of the sourcecode from the repository (remote server). git clone <put here URL of repository> Be aware that hidden folder \".git\" contains information and history of the repository. Don't delete it and don't edit the content.","title":"Remote and local repo"},{"location":"git_basics/#daily-operations","text":"","title":"Daily operations"},{"location":"git_basics/#pull","text":"Keep your local branches synchronized, run the git pull command in order to fetch and download content from remote repository. git pull git pull <put here URL of repository> git pull --verbose","title":"Pull"},{"location":"git_basics/#branch-and-checkout","text":"Before changing anything on your local copy make sure you are working on the right branch, list them: git branch git branch --list To create a local branch: git branch <put here name> To create a remote branch: git remote add <remote branch name> <put here URL of repository> Change (local) current working branch using: git checkout <put here branch name>","title":"Branch and Checkout"},{"location":"git_basics/#status-add-and-commit","text":"Be familiar with the concept of staging area , and verify the current status with: git status Then add files and changes you want to commit via: git add <filename> git add <directory> git add -u <- stage modified and deleted files only (already part of the index) git add . <- stage all files in the entire repository Finally create a snapshot of these changes, it will be available in the history of commits of the branch. git commit -m \"commit short description\" git commit I strongly suggest to use git commit , in order to open the predefined editor and write a complete description of the changes, including: First line: short and clear headline Second line: always empty Third line and others: all useful information Please list the missing features (still ongoing or todo) Add guidelines to compile the project, test it, and run simulations Put notes for the \"you from the future\" Some tips are available here . When closing the editor the commit will be automatically done. Check the history via: git log --oneline git log -p <commit A sha> <commit B sha> git show <commit sha> git show <commit sha> --stat git show <commit sha>:filepathname > filepathname_of_the_copy If you want to get rid of all your changes (staged and not) and go back to the last commit use: git reset --hard","title":"Status, Add and Commit"},{"location":"git_basics/#push","text":"Upload your local repository content to the remote one, via git push command: git push git push <remote branch name> If you want to configure a relationship between your local branch and a remote one proceed as: git checkout <local branch> git branch --set-upstream-to=<remote repo/branch> git branch -vv Funny, but think about it...","title":"Push"},{"location":"git_basics/#stash","text":"Sometimes you have to switch quickly to other branches (to fix a bug or check something ... ) but git can't switch branches if there are changes pending on your current branch. At the same time you don't want to clone another repo or worst to loose your current sourcecode. The git stash command can help you, temporary storing your code changes. Then they can be retrieved any time in the future. Please read here .","title":"Stash"},{"location":"git_basics/#files-management","text":"There are some files you may want Git to ignore and not track in your repository. These include many that are auto-generated (by IDE) or platform-specific, as well as other local configuration files or compiled code (.elf .exe .bin). To do that create a hidden file name \".gitignore\" and edit putting inside all folders and name files that you want to ignore. Please note that multiple .gitgnore files can be created inside each project folder for better filter granularity. Here some templates Example for Atmel embedded project: ## Ignore Atmel Studio temporary files and build results # Atmel Studio is powered by an older version of Visual Studio, # so most of the project and solution files are the same as VS files, # only prefixed by an `at`. #Build Directories [Dd]ebug/ [Rr]elease/ #Build Results *.o *.d *.eep *.elf *.hex *.map *.srec #User Specific Files *.atsuo Other files are usually part of the repository: README.md Short project info, installation and configuration, sw architecture, and notes. CONTRIBUTE.md Guideline for contributing to the project. LICENSE.md Software license information","title":"Files management"},{"location":"git_basics/#links","text":"Git guide from Github platform Gitflow in 5 minutes Git tutorial from freeCodeCamp.org Third-party Git GUI clients: Tortoise Git , GitHub Desktop , Sourcetree","title":"Links"},{"location":"linux_fedora/","text":"Fedora Linux TODO I usually work on virtual machines. They give me isolation and security from my primary OS, and they offers a versatile environment for testing and development. Steps below have been written according to that idea. Installation Download the last release for laptop: Fedora Workstation Create a new virtual machine (use VMware or VirtualBox software) by adding the ISO file just downloaded. Follow step-by-step instructions. It's quite straightforward but if you feel insecure there are tons of tutorial on the web... at the end you'll get a running version. Check current version: test@fedora:~$ uname -a Linux fedora 6.8.5-301.fc40.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Apr 11 20:00:10 UTC 2024 x86_64 GNU/Linux Update the system: test@fedora:~$ sudo dnf update Update Keep your system and packages updated by running command below: test@fedora:~$ sudo dnf upgrade test@fedora:~$ uname -a Then reboot the system (both commands are equivalent): test@fedora:~$ sudo reboot test@fedora:~$ sudo shutdown -r now The package manager: DNF Basic operations on a package: test@fedora:~$ sudo dnf install PACKAGENAME test@fedora:~$ sudo dnf update PACKAGENAME test@fedora:~$ sudo dnf remove PACKAGENAME List installed and available packages (or only the installed): test@fedora:~$ sudo dnf list test@fedora:~$ sudo dnf list installed Check latest update for your packages: test@fedora:~$ sudo dnf check-update Search a package by name, and get specific info: test@fedora:~$ sudo dnf search NAME test@fedora:~$ sudo dnf info PACKAGENAME Show repository: test@fedora:~$ sudo dnf repolist all Setup These are my personal customization, as a guideline. Mount local shared folder (VMware) Note: add the desired folder in the VMware configuration panel, then run the virtual machine and run the command test@fedora:~$ sudo mkdir /media/shared test@fedora:~$ sudo /usr/bin/vmhgfs-fuse .host:/ /media/shared -o subtype=vmhgfs-fuse,allow_other Install Git Git is already pre-installed on Fedora. Just configure your account: test@fedora:~$ git config --global user.name \"YOUR NAME\" test@fedora:~$ git config --global user.email \"YOUR EMAIL ADDRESS\" Install C/C++ toolchain test@fedora:~$ sudo dnf install gcc Install RUST toolchain Make sure you have gcc toolchain, then follow instruction here . Install Python Python is already pre-installed on Fedora. Just check the version and eventually updated it... Check also PIP (Python package manager). test@fedora:~$ python --version Python 3.12.7 test@fedora:~$ pip --version pip 23.3.2 from /usr/lib/python3.12/site-packages/pip (python 3.12) test@fedora:~$ pip install mkdocs pip 23.3.2 from /usr/lib/python3.12/site-packages/pip (python 3.12) If you have some project documentation via MkDocs install the package: test@fedora:~$ pip install mkdocs Install VSCode Upgrade packages: test@fedora:~$ sudo dnf upgrade --refresh Import VSCode GPG key to verify the authenticity of the installed packages: test@fedora:~$ sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc Import VSCode RPM Repository using the command below (it creates a new repository file with the necessary configuration to access the Visual Studio Code packages): test@fedora:~$ printf \"[vscode]\\nname=packages.microsoft.com\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode/\\nenabled=1\\ngpgcheck=1\\nrepo_gpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\\nmetadata_expire=1h\" | sudo tee -a /etc/yum.repos.d/vscode.repo Finalize Installation (for stable version): test@fedora:~$ sudo dnf install code Run VSCode and install desired extensions: Git Graph (mhutchie) Markdown Preview Github Stylng (Matt Bierner) Python (Microsoft) rust-analyzer (The Rust Programming Language) RUST: Code navigation Code navigation features are available in the context menu in the editor. Go to Definition F12 Peek Definition Ctrl+Shift+F10 Go to References Shift+F12 - Show all references for the type. Show Call Hierarchy Shift+Alt+H - Show all calls from or to a function. You can navigate via symbol search using the Go to Symbol commands from the Command Palette ( Ctrl+Shift+P ). Go to Symbol in File Ctrl+Shift+O Go to Symbol in Workspace Ctrl+T","title":"Fedora OS"},{"location":"linux_fedora/#fedora-linux","text":"TODO I usually work on virtual machines. They give me isolation and security from my primary OS, and they offers a versatile environment for testing and development. Steps below have been written according to that idea.","title":"Fedora Linux"},{"location":"linux_fedora/#installation","text":"Download the last release for laptop: Fedora Workstation Create a new virtual machine (use VMware or VirtualBox software) by adding the ISO file just downloaded. Follow step-by-step instructions. It's quite straightforward but if you feel insecure there are tons of tutorial on the web... at the end you'll get a running version. Check current version: test@fedora:~$ uname -a Linux fedora 6.8.5-301.fc40.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Apr 11 20:00:10 UTC 2024 x86_64 GNU/Linux Update the system: test@fedora:~$ sudo dnf update","title":"Installation"},{"location":"linux_fedora/#update","text":"Keep your system and packages updated by running command below: test@fedora:~$ sudo dnf upgrade test@fedora:~$ uname -a Then reboot the system (both commands are equivalent): test@fedora:~$ sudo reboot test@fedora:~$ sudo shutdown -r now","title":"Update"},{"location":"linux_fedora/#the-package-manager-dnf","text":"Basic operations on a package: test@fedora:~$ sudo dnf install PACKAGENAME test@fedora:~$ sudo dnf update PACKAGENAME test@fedora:~$ sudo dnf remove PACKAGENAME List installed and available packages (or only the installed): test@fedora:~$ sudo dnf list test@fedora:~$ sudo dnf list installed Check latest update for your packages: test@fedora:~$ sudo dnf check-update Search a package by name, and get specific info: test@fedora:~$ sudo dnf search NAME test@fedora:~$ sudo dnf info PACKAGENAME Show repository: test@fedora:~$ sudo dnf repolist all","title":"The package manager: DNF"},{"location":"linux_fedora/#setup","text":"These are my personal customization, as a guideline. Mount local shared folder (VMware) Note: add the desired folder in the VMware configuration panel, then run the virtual machine and run the command test@fedora:~$ sudo mkdir /media/shared test@fedora:~$ sudo /usr/bin/vmhgfs-fuse .host:/ /media/shared -o subtype=vmhgfs-fuse,allow_other","title":"Setup"},{"location":"linux_fedora/#install-git","text":"Git is already pre-installed on Fedora. Just configure your account: test@fedora:~$ git config --global user.name \"YOUR NAME\" test@fedora:~$ git config --global user.email \"YOUR EMAIL ADDRESS\"","title":"Install Git"},{"location":"linux_fedora/#install-cc-toolchain","text":"test@fedora:~$ sudo dnf install gcc","title":"Install C/C++ toolchain"},{"location":"linux_fedora/#install-rust-toolchain","text":"Make sure you have gcc toolchain, then follow instruction here .","title":"Install RUST toolchain"},{"location":"linux_fedora/#install-python","text":"Python is already pre-installed on Fedora. Just check the version and eventually updated it... Check also PIP (Python package manager). test@fedora:~$ python --version Python 3.12.7 test@fedora:~$ pip --version pip 23.3.2 from /usr/lib/python3.12/site-packages/pip (python 3.12) test@fedora:~$ pip install mkdocs pip 23.3.2 from /usr/lib/python3.12/site-packages/pip (python 3.12) If you have some project documentation via MkDocs install the package: test@fedora:~$ pip install mkdocs","title":"Install Python"},{"location":"linux_fedora/#install-vscode","text":"Upgrade packages: test@fedora:~$ sudo dnf upgrade --refresh Import VSCode GPG key to verify the authenticity of the installed packages: test@fedora:~$ sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc Import VSCode RPM Repository using the command below (it creates a new repository file with the necessary configuration to access the Visual Studio Code packages): test@fedora:~$ printf \"[vscode]\\nname=packages.microsoft.com\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode/\\nenabled=1\\ngpgcheck=1\\nrepo_gpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\\nmetadata_expire=1h\" | sudo tee -a /etc/yum.repos.d/vscode.repo Finalize Installation (for stable version): test@fedora:~$ sudo dnf install code Run VSCode and install desired extensions: Git Graph (mhutchie) Markdown Preview Github Stylng (Matt Bierner) Python (Microsoft) rust-analyzer (The Rust Programming Language) RUST: Code navigation Code navigation features are available in the context menu in the editor. Go to Definition F12 Peek Definition Ctrl+Shift+F10 Go to References Shift+F12 - Show all references for the type. Show Call Hierarchy Shift+Alt+H - Show all calls from or to a function. You can navigate via symbol search using the Go to Symbol commands from the Command Palette ( Ctrl+Shift+P ). Go to Symbol in File Ctrl+Shift+O Go to Symbol in Workspace Ctrl+T","title":"Install VSCode"},{"location":"linux_os/","text":"Linux OS Linux is one of the most versatile operative systems available today. There are different flavors but most of the concepts are applicable on any distribution (following notes are based on Debian 11.6). Tip Makeyou confortable to use linux shell. Most of the time the target system does not run a Desktop GUI and you will connect via SSH. Quick overview on OS TODO What's an OS. TODO Differente layers and components. TODO Linux distributions. Basic commands Work on files, folder, ... $ pwd $ ls -la $ mkdir <DIR PATH> $ rmdir <DIR PATH> $ rm -rf <DIR PATH> $ mv <FILE OR DIR PATH> <NEW FILE OR DIR PATH> $ cp <FILES OR DIR PATH> <NEW FILES OR DIR PATH> $ touch <FILE PATH> $ vi <FILE PATH> $ nano <FILE PATH> $ cat <FILE PATH> Give folder/file permission: Each number has a specific meaning for: user - group - others. Just don't give always full permission to everyone. 0 (binary 000) --- No permissions at all 1 (binary 001) --x Only execute 2 (binary 010) -w- Only write 3 (binary 011) -wx Write and execute 4 (binary 100) r-- Only read 5 (binary 101) r-x Read and execute 6 (binary 110) rw- Read and write 7 (binary 111) rwx Read, write, and execute $ sudo chmod -R NNN FOLDERPATH TAR is a tool to archive files, it creates a single file out of multiple ones ( archiving .tar file) and if requested it can also reduce the final size ( compression .tar.gz using GZIP). The final file is often called \"tarball\". $ tar cvf <TARBALL NAME>.tar <SOURCE DIRNAME> $ tar cvzf <TARBALL NAME>.tar.gz <SOURCE DIRNAME> $ tar tvf <TARBALL FILE> $ tar rvf <TARBALL NAME>.tar <FILES OR DIRNAME TO APPEND> $ tar xvf <TARBALL FILE> $ tar xvf <TARBALL FILE> -C <DESTINATION DIRNAME> Install, update, remove software (APT package manager). $ apt edit-sources $ apt update $ apt list --installed $ apt show <PACKAGE NAME> $ apt search <PACKAGE NAME> $ apt install <PACKAGE NAME> $ apt remove <PACKAGE NAME> Note Some of the commands above shall be run as admin. Add su or sudo before the desired command to run it with priviledges. Tip All the commands have a specific manual page with usage and flags description. Check syntax and options to get desired result. $ man <COMMAND> Tip UNIX derived systems work with the pipeline mechanism, a really cool way to process an output through mutiple stages. Example: if your command return a bigger list of items, you can filter them in order to get only the relevant ones, and then make it scrollable on the screen just by adding: $ <COMMAND> | grep <FILTER> | less Editing files Two editors are always available on Linux systems: nano (simple and straightforward) or vi (less intuitive but powerful). I suggest to learn basic few operations on both editors: open, save, save as, close search a word copy and paste text Use AUTOTOOLS to create a package Sample project: snake clone This project is composed by following files: main.cpp : entry point snake.h : (header) class in charge to plot the game area and manage the game logic snake.cpp : (body) The game uses \"curses\" library for plotting the graphical elements via text console. // File: main.cpp #include <iostream> #include <curses.h> #include <unistd.h> #include \"snake.h\" int main() { // code } // File: snake.h #ifndef SNAKE_H #define SNAKE_H // define #include <iostream> #include <stdlib.h> #include <time.h> #include <curses.h> class Snake { public: // code } // File: snake.cpp #include \"snake.h\" Snake::Snake() { // code } int Snake::Run() { // code } The program can be compiled and run using: $ g++ *.cpp -o snake -lcurses -Wall Create the package Open your project folder, then create the configuration file \"configure.ac\" AC_INIT([snake], [0.1], [lisr-pcx@mail.com]) AM_INIT_AUTOMAKE AC_PROG_CPP AC_CONFIG_FILES([Makefile]) AC_OUTPUT Create the \"Makefile.am\" bin_PROGRAMS = snakegame snakegame_SOURCES = snake.cpp clean-local: @rm config.status configure config.log @rm Makefile @rm -r autom4te.cache/ @rm aclocal.m4 @rm compile install-sh missing Makefile.in Finally run commands: $ aclocal $ autoheader $ autoconf $ automake $ automake --add-missing $ ./configure $ make $ make dist At this stage make sure your tarball works fine, copy into your testing OS, extract and run again ./configure and make . Create a DEBIAN package Full documentation can be found on official Debian site, anyway... Introduction to Debian packaging Be friendly to your packagers Debian Developers' Reference Debian New Maintainers' Guide","title":"Work with Linux"},{"location":"linux_os/#linux-os","text":"Linux is one of the most versatile operative systems available today. There are different flavors but most of the concepts are applicable on any distribution (following notes are based on Debian 11.6). Tip Makeyou confortable to use linux shell. Most of the time the target system does not run a Desktop GUI and you will connect via SSH.","title":"Linux OS"},{"location":"linux_os/#quick-overview-on-os","text":"TODO What's an OS. TODO Differente layers and components. TODO Linux distributions.","title":"Quick overview on OS"},{"location":"linux_os/#basic-commands","text":"Work on files, folder, ... $ pwd $ ls -la $ mkdir <DIR PATH> $ rmdir <DIR PATH> $ rm -rf <DIR PATH> $ mv <FILE OR DIR PATH> <NEW FILE OR DIR PATH> $ cp <FILES OR DIR PATH> <NEW FILES OR DIR PATH> $ touch <FILE PATH> $ vi <FILE PATH> $ nano <FILE PATH> $ cat <FILE PATH> Give folder/file permission: Each number has a specific meaning for: user - group - others. Just don't give always full permission to everyone. 0 (binary 000) --- No permissions at all 1 (binary 001) --x Only execute 2 (binary 010) -w- Only write 3 (binary 011) -wx Write and execute 4 (binary 100) r-- Only read 5 (binary 101) r-x Read and execute 6 (binary 110) rw- Read and write 7 (binary 111) rwx Read, write, and execute $ sudo chmod -R NNN FOLDERPATH TAR is a tool to archive files, it creates a single file out of multiple ones ( archiving .tar file) and if requested it can also reduce the final size ( compression .tar.gz using GZIP). The final file is often called \"tarball\". $ tar cvf <TARBALL NAME>.tar <SOURCE DIRNAME> $ tar cvzf <TARBALL NAME>.tar.gz <SOURCE DIRNAME> $ tar tvf <TARBALL FILE> $ tar rvf <TARBALL NAME>.tar <FILES OR DIRNAME TO APPEND> $ tar xvf <TARBALL FILE> $ tar xvf <TARBALL FILE> -C <DESTINATION DIRNAME> Install, update, remove software (APT package manager). $ apt edit-sources $ apt update $ apt list --installed $ apt show <PACKAGE NAME> $ apt search <PACKAGE NAME> $ apt install <PACKAGE NAME> $ apt remove <PACKAGE NAME> Note Some of the commands above shall be run as admin. Add su or sudo before the desired command to run it with priviledges. Tip All the commands have a specific manual page with usage and flags description. Check syntax and options to get desired result. $ man <COMMAND> Tip UNIX derived systems work with the pipeline mechanism, a really cool way to process an output through mutiple stages. Example: if your command return a bigger list of items, you can filter them in order to get only the relevant ones, and then make it scrollable on the screen just by adding: $ <COMMAND> | grep <FILTER> | less","title":"Basic commands"},{"location":"linux_os/#editing-files","text":"Two editors are always available on Linux systems: nano (simple and straightforward) or vi (less intuitive but powerful). I suggest to learn basic few operations on both editors: open, save, save as, close search a word copy and paste text","title":"Editing files"},{"location":"linux_os/#use-autotools-to-create-a-package","text":"","title":"Use AUTOTOOLS to create a package"},{"location":"linux_os/#sample-project-snake-clone","text":"This project is composed by following files: main.cpp : entry point snake.h : (header) class in charge to plot the game area and manage the game logic snake.cpp : (body) The game uses \"curses\" library for plotting the graphical elements via text console. // File: main.cpp #include <iostream> #include <curses.h> #include <unistd.h> #include \"snake.h\" int main() { // code } // File: snake.h #ifndef SNAKE_H #define SNAKE_H // define #include <iostream> #include <stdlib.h> #include <time.h> #include <curses.h> class Snake { public: // code } // File: snake.cpp #include \"snake.h\" Snake::Snake() { // code } int Snake::Run() { // code } The program can be compiled and run using: $ g++ *.cpp -o snake -lcurses -Wall","title":"Sample project: snake clone"},{"location":"linux_os/#create-the-package","text":"Open your project folder, then create the configuration file \"configure.ac\" AC_INIT([snake], [0.1], [lisr-pcx@mail.com]) AM_INIT_AUTOMAKE AC_PROG_CPP AC_CONFIG_FILES([Makefile]) AC_OUTPUT Create the \"Makefile.am\" bin_PROGRAMS = snakegame snakegame_SOURCES = snake.cpp clean-local: @rm config.status configure config.log @rm Makefile @rm -r autom4te.cache/ @rm aclocal.m4 @rm compile install-sh missing Makefile.in Finally run commands: $ aclocal $ autoheader $ autoconf $ automake $ automake --add-missing $ ./configure $ make $ make dist At this stage make sure your tarball works fine, copy into your testing OS, extract and run again ./configure and make .","title":"Create the package"},{"location":"linux_os/#create-a-debian-package","text":"Full documentation can be found on official Debian site, anyway... Introduction to Debian packaging Be friendly to your packagers Debian Developers' Reference Debian New Maintainers' Guide","title":"Create a DEBIAN package"},{"location":"more_stuff/","text":"More stuff Down below are listed further concepts, articles, projects, topics ... that I can't relate directly to the topics of this site. This page is a kind of a storage box , sorry for the mess. SMART This method allows you to write goals that are clear, attainable and meaningful. Having clarity in your goal-setting provides the motivation and focus you need to be successful. S pecific (simple, sensible, significant) M easurable (meaningful, motivating) A chievable (agreed, attainable) R elevant (reasonable, realistic and resourced, results-based) T ime bound (time-based, time limited, time/cost limited, timely, time-sensitive) Smart goals The Google Project Aristotle The researchers found ( read ) that what really mattered was less about who is on the team, and more about how the team worked together. In order of importance: Psychological safety ( video ) Team members feel safe to take risks and be vulnerable in front of each other \u201cIf I make a mistake on our team, it is not held against me.\u201d Dependability Team members get things done on time and meet Google\u2019s high bar for excellence \u201cWhen my teammates say they\u2019ll do something, they follow through with it.\u201d Structure and clarity Team members have clear roles, plans and goals \u201cOur team has an effective decision-making process.\u201d Meaning Work is personally important to team members \u201cThe work I do for our team is meaningful to me.\u201d Impact Team members think their work matters and creates change \u201cI understand how our team\u2019s work contributes to the organization's goals.\u201d The researchers also discovered which variables were not significantly connected with team effectiveness at Google: Collocation of teammates (sitting together in the same office) Consensus-driven decision making Extroversion of team members Individual performance of team members Workload size Seniority Team size Tenure It\u2019s important to note though that while these variables did not significantly impact team effectiveness measurements at Google, that doesn\u2019t mean they\u2019re not important elsewhere. The fundamental thing that distinguish good teams from disfunctional ones is how team mates treat one another. Sandi Metz Links to Conferences Radical candor Love Your Work Most Leaders Don't Even Know the Game They're In An Engineer's Guide To Burnout And How To Hack It","title":"More stuff"},{"location":"more_stuff/#more-stuff","text":"Down below are listed further concepts, articles, projects, topics ... that I can't relate directly to the topics of this site. This page is a kind of a storage box , sorry for the mess.","title":"More stuff"},{"location":"more_stuff/#smart","text":"This method allows you to write goals that are clear, attainable and meaningful. Having clarity in your goal-setting provides the motivation and focus you need to be successful. S pecific (simple, sensible, significant) M easurable (meaningful, motivating) A chievable (agreed, attainable) R elevant (reasonable, realistic and resourced, results-based) T ime bound (time-based, time limited, time/cost limited, timely, time-sensitive) Smart goals","title":"SMART"},{"location":"more_stuff/#the-google-project-aristotle","text":"The researchers found ( read ) that what really mattered was less about who is on the team, and more about how the team worked together. In order of importance: Psychological safety ( video ) Team members feel safe to take risks and be vulnerable in front of each other \u201cIf I make a mistake on our team, it is not held against me.\u201d Dependability Team members get things done on time and meet Google\u2019s high bar for excellence \u201cWhen my teammates say they\u2019ll do something, they follow through with it.\u201d Structure and clarity Team members have clear roles, plans and goals \u201cOur team has an effective decision-making process.\u201d Meaning Work is personally important to team members \u201cThe work I do for our team is meaningful to me.\u201d Impact Team members think their work matters and creates change \u201cI understand how our team\u2019s work contributes to the organization's goals.\u201d The researchers also discovered which variables were not significantly connected with team effectiveness at Google: Collocation of teammates (sitting together in the same office) Consensus-driven decision making Extroversion of team members Individual performance of team members Workload size Seniority Team size Tenure It\u2019s important to note though that while these variables did not significantly impact team effectiveness measurements at Google, that doesn\u2019t mean they\u2019re not important elsewhere. The fundamental thing that distinguish good teams from disfunctional ones is how team mates treat one another. Sandi Metz","title":"The Google Project Aristotle"},{"location":"more_stuff/#links-to-conferences","text":"Radical candor Love Your Work Most Leaders Don't Even Know the Game They're In An Engineer's Guide To Burnout And How To Hack It","title":"Links to Conferences"},{"location":"podcast_books/","text":"Podcast Soft Skills Engineering CoRecursive The Changelog Legacy Code Rocks Software Developers Journey Books Technical David Thomas, Andrew Hunt The Pragmatic Programmer The Pragmatic Bookshelf Robert C. Martin Clean Code A Handbook of Agile Software Craftsmanship Prentice Hall Kent Beck, Cynthia Andres Extreme Programming Explained Addison Wesley Fiction Douglas Coupland Microserfs Anna Wiener Uncanny Valley (memoir)","title":"Podcast and books"},{"location":"podcast_books/#podcast","text":"Soft Skills Engineering CoRecursive The Changelog Legacy Code Rocks Software Developers Journey","title":"Podcast"},{"location":"podcast_books/#books","text":"","title":"Books"},{"location":"podcast_books/#technical","text":"David Thomas, Andrew Hunt The Pragmatic Programmer The Pragmatic Bookshelf Robert C. Martin Clean Code A Handbook of Agile Software Craftsmanship Prentice Hall Kent Beck, Cynthia Andres Extreme Programming Explained Addison Wesley","title":"Technical"},{"location":"podcast_books/#fiction","text":"Douglas Coupland Microserfs Anna Wiener Uncanny Valley (memoir)","title":"Fiction"},{"location":"regular_expressions/","text":"Regular Expressions Mastering regex can take a lot of your time, especially at the beginning, but you only need to practice. Use them in your C/C++ code but also inside scripts (Python) or directly in your editor (vi or notepad++). Overview A regular expression (shortened as regex or regexp ) is a sequence of characters that specifies a search pattern in text. Usually such patterns are used by string-search algorithms for: find and find-replace operations input validation log analysis Most programming languages support regex either natively or via libraries. A regex pattern matches a target string . The pattern is composed by a sequence of atoms . An atom is a single point within the regex pattern which it tries to match to the target string. A match is made, not when all the atoms of the string are matched, but rather when all the pattern atoms in the regex have matched. The idea is to make a small pattern of characters stand for a large number of possible strings, rather than compiling a large list of all the literal possibilities. Syntax Depending on the regex processor there are about fourteen metacharacters, characters that may or may not have their literal character meaning, depending on context, or whether they are \"escaped\", i.e. preceded by an escape sequence, in this case, the backslash \\ . Examples .at matches any three-character string ending with \"at\", including \"hat\", \"cat\", \"bat\", \"4at\", \"#at\" and \" at\" (starting with a space). [hc]at matches \"hat\" and \"cat\". [^b]at matches all strings matched by .at except \"bat\". [^hc]at matches all strings matched by .at other than \"hat\" and \"cat\". ^[hc]at matches \"hat\" and \"cat\", but only at the beginning of the string or line. [hc]at$ matches \"hat\" and \"cat\", but only at the end of the string or line. \\[.\\] matches any single character surrounded by \"[\" and \"]\" since the brackets are escaped, for example: \"[a]\", \"[b]\", \"[7]\", \"[@]\", \"[]]\", and \"[ ]\" (bracket space bracket). s.* matches s followed by zero or more characters, for example: \"s\", \"saw\", \"seed\", \"s3w96.7\". Use case scenario Create a C++ program in order to validate a given email address (string). mario.rossi@mail.com --> OK antonio@mail.com --> INVALID mario.rossi73@mail.com --> OK mario1.rossi@mail.com --> INVALID mario.giuseppe.rossi@mail.com --> INVALID mario.rossi@.com --> INVALID mario.rossi@casella --> INVALID mario.rossi@mail.a --> INVALID mario.rossi@posta.it --> OK These address are composed by different parts: any lowercase or UPPERCASE letter repeated one or more times a single dot any lowercase, UPPERCASE letter or number repeated one or more times the symbol @ any lowercase, UPPERCASE letter or number repeated one or more times a single dot any lowercase or UPPERCASE letter repeated two or three times Regex: ^ [a-zA-Z]+ . [a-zA-Z0-9]+ @ [a-zA-Z0-9]+ . [a-zA-Z]{2,3} $ Regex in a shorter way: ^ [a-zA-Z]+ . \\w+ @ \\w+ . [a-zA-Z]{2,3} $ Then put the regex into C++ code (be care to escape char \\ ): #include <string> #include <regex> bool ValidateFunction(std::string sample) { bool ret = false; std::string regex_pattern = \"^[a-zA-Z]+\\\\.\\\\w+@\\\\w+\\\\.[a-zA-Z]{2,3}$\"; std::regex regex_rule(regex_pattern); ret = std::regex_match(sample, regex_rule); return(ret); } Links For a quick overview Regex by Corey Schafer Alternative tutorial C++ weekly regex and C++ weekly regex optimization Regex on Wikipedia Online checker for regex Books Jeffrey E F Friedl Mastering Regular Expressions O\u2019Reilly","title":"Regular Expressions"},{"location":"regular_expressions/#regular-expressions","text":"Mastering regex can take a lot of your time, especially at the beginning, but you only need to practice. Use them in your C/C++ code but also inside scripts (Python) or directly in your editor (vi or notepad++).","title":"Regular Expressions"},{"location":"regular_expressions/#overview","text":"A regular expression (shortened as regex or regexp ) is a sequence of characters that specifies a search pattern in text. Usually such patterns are used by string-search algorithms for: find and find-replace operations input validation log analysis Most programming languages support regex either natively or via libraries. A regex pattern matches a target string . The pattern is composed by a sequence of atoms . An atom is a single point within the regex pattern which it tries to match to the target string. A match is made, not when all the atoms of the string are matched, but rather when all the pattern atoms in the regex have matched. The idea is to make a small pattern of characters stand for a large number of possible strings, rather than compiling a large list of all the literal possibilities.","title":"Overview"},{"location":"regular_expressions/#syntax","text":"Depending on the regex processor there are about fourteen metacharacters, characters that may or may not have their literal character meaning, depending on context, or whether they are \"escaped\", i.e. preceded by an escape sequence, in this case, the backslash \\ .","title":"Syntax"},{"location":"regular_expressions/#examples","text":".at matches any three-character string ending with \"at\", including \"hat\", \"cat\", \"bat\", \"4at\", \"#at\" and \" at\" (starting with a space). [hc]at matches \"hat\" and \"cat\". [^b]at matches all strings matched by .at except \"bat\". [^hc]at matches all strings matched by .at other than \"hat\" and \"cat\". ^[hc]at matches \"hat\" and \"cat\", but only at the beginning of the string or line. [hc]at$ matches \"hat\" and \"cat\", but only at the end of the string or line. \\[.\\] matches any single character surrounded by \"[\" and \"]\" since the brackets are escaped, for example: \"[a]\", \"[b]\", \"[7]\", \"[@]\", \"[]]\", and \"[ ]\" (bracket space bracket). s.* matches s followed by zero or more characters, for example: \"s\", \"saw\", \"seed\", \"s3w96.7\".","title":"Examples"},{"location":"regular_expressions/#use-case-scenario","text":"Create a C++ program in order to validate a given email address (string). mario.rossi@mail.com --> OK antonio@mail.com --> INVALID mario.rossi73@mail.com --> OK mario1.rossi@mail.com --> INVALID mario.giuseppe.rossi@mail.com --> INVALID mario.rossi@.com --> INVALID mario.rossi@casella --> INVALID mario.rossi@mail.a --> INVALID mario.rossi@posta.it --> OK These address are composed by different parts: any lowercase or UPPERCASE letter repeated one or more times a single dot any lowercase, UPPERCASE letter or number repeated one or more times the symbol @ any lowercase, UPPERCASE letter or number repeated one or more times a single dot any lowercase or UPPERCASE letter repeated two or three times Regex: ^ [a-zA-Z]+ . [a-zA-Z0-9]+ @ [a-zA-Z0-9]+ . [a-zA-Z]{2,3} $ Regex in a shorter way: ^ [a-zA-Z]+ . \\w+ @ \\w+ . [a-zA-Z]{2,3} $ Then put the regex into C++ code (be care to escape char \\ ): #include <string> #include <regex> bool ValidateFunction(std::string sample) { bool ret = false; std::string regex_pattern = \"^[a-zA-Z]+\\\\.\\\\w+@\\\\w+\\\\.[a-zA-Z]{2,3}$\"; std::regex regex_rule(regex_pattern); ret = std::regex_match(sample, regex_rule); return(ret); }","title":"Use case scenario"},{"location":"regular_expressions/#links","text":"For a quick overview Regex by Corey Schafer Alternative tutorial C++ weekly regex and C++ weekly regex optimization Regex on Wikipedia Online checker for regex","title":"Links"},{"location":"regular_expressions/#books","text":"Jeffrey E F Friedl Mastering Regular Expressions O\u2019Reilly","title":"Books"},{"location":"tdd_workflow/","text":"TDD: Test-Driven Development TODO overview Getting Started TODO workflow + example Tips For the reviewer, it\u2019s important to pay attention to the way they formulate the feedback . This is extremely crucial for your feedback to be accepted. Use I-messages: Right: \u201cIt\u2019s hard for me to grasp what\u2019s going on in this code.\u201d Wrong: \u201cYou are writing cryptic code.\u201d Talk about the code, not the coder. Right: \u201cThis code is requesting the service multiple times, which is inefficient.\u201d Wrong: \u201cYou\u2019re requesting the service multiple times, which is inefficient.\u201d Ask questions instead of making statements. Right: \u201cWhat do you think about the name \u2018userId\u2019 for this variable?\u201d Wrong: \u201cThis variable should have the name \u2018userId\u2019.\u201d Always refer to the behavior, not the traits of the author. Right: \u201cI believe that you should pay more attention to writing tests.\u201d Wrong: \u201cYou are sloppy when it comes to writing tests.\u201d Accept that there are different solutions Right: \u201cI would do it in another way, but your solution is also fine.\u201d Wrong: \u201cI always do it this way and you should too.\u201d Distinguish between common best practices and your personal taste. Mind that your criticism may just reflect your personal taste and not an objectively wrong code. Make compromises and be pragmatic. Don\u2019t jump in front of every train Don\u2019t be a pedant. Don\u2019t criticize every single line in the code. This will annoy the author and reduce their openness to further feedback. Focus on the flaws and code smells that are most important to you. Respect and trust the author Nobody writes bad code on purpose. The author wrote the code to the best of their knowledge and belief. Mind the OIR rule of giving feedback Observation: \u201cThis method has 100 lines.\u201d Impact: \u201cThis makes it hard for me to grasp the essential logic of this method.\u201d Request: \u201cI suggest extracting the low-level-details into subroutines and give them expressive names.\u201d Before giving feedback, ask yourself: Is it true? (opinion != truth) Is it necessary? (avoid nagging, unnecessary comments and out-of-scope work) Is it kind? (no shaming) Be humble! You are not perfect and you can also improve. It\u2019s fine to say: Everything is good! Don\u2019t forget to praise. Books Saleem Siddiqui Learning Test-Driven Development O\u2019Reilly, 2022 Kent Beck Test-Driven Development By Example Addison Wesley, 2002 Links TODO","title":"Test Driven Development"},{"location":"tdd_workflow/#tdd-test-driven-development","text":"TODO overview","title":"TDD: Test-Driven Development"},{"location":"tdd_workflow/#getting-started","text":"TODO workflow + example","title":"Getting Started"},{"location":"tdd_workflow/#tips","text":"For the reviewer, it\u2019s important to pay attention to the way they formulate the feedback . This is extremely crucial for your feedback to be accepted. Use I-messages: Right: \u201cIt\u2019s hard for me to grasp what\u2019s going on in this code.\u201d Wrong: \u201cYou are writing cryptic code.\u201d Talk about the code, not the coder. Right: \u201cThis code is requesting the service multiple times, which is inefficient.\u201d Wrong: \u201cYou\u2019re requesting the service multiple times, which is inefficient.\u201d Ask questions instead of making statements. Right: \u201cWhat do you think about the name \u2018userId\u2019 for this variable?\u201d Wrong: \u201cThis variable should have the name \u2018userId\u2019.\u201d Always refer to the behavior, not the traits of the author. Right: \u201cI believe that you should pay more attention to writing tests.\u201d Wrong: \u201cYou are sloppy when it comes to writing tests.\u201d Accept that there are different solutions Right: \u201cI would do it in another way, but your solution is also fine.\u201d Wrong: \u201cI always do it this way and you should too.\u201d Distinguish between common best practices and your personal taste. Mind that your criticism may just reflect your personal taste and not an objectively wrong code. Make compromises and be pragmatic. Don\u2019t jump in front of every train Don\u2019t be a pedant. Don\u2019t criticize every single line in the code. This will annoy the author and reduce their openness to further feedback. Focus on the flaws and code smells that are most important to you. Respect and trust the author Nobody writes bad code on purpose. The author wrote the code to the best of their knowledge and belief. Mind the OIR rule of giving feedback Observation: \u201cThis method has 100 lines.\u201d Impact: \u201cThis makes it hard for me to grasp the essential logic of this method.\u201d Request: \u201cI suggest extracting the low-level-details into subroutines and give them expressive names.\u201d Before giving feedback, ask yourself: Is it true? (opinion != truth) Is it necessary? (avoid nagging, unnecessary comments and out-of-scope work) Is it kind? (no shaming) Be humble! You are not perfect and you can also improve. It\u2019s fine to say: Everything is good! Don\u2019t forget to praise.","title":"Tips"},{"location":"tdd_workflow/#books","text":"Saleem Siddiqui Learning Test-Driven Development O\u2019Reilly, 2022 Kent Beck Test-Driven Development By Example Addison Wesley, 2002","title":"Books"},{"location":"tdd_workflow/#links","text":"TODO","title":"Links"},{"location":"technical_documentation/","text":"Technical Documentation Forget the idea \"My code is self documented\", anyone who use your baseline need a good source of information about logical operations, design choice, guidelines, theory behind .. , troubleshooting, tips and tricks. Do not confuse writing clear - and clean - code, with the documentation process, they are both necessary but they have different goal. Remember that writing documentation is part of the task. Only once documentation is added the activity can be mark as done. How to write technical documents Identify your audience: Internal use (System design, architecture ..) Things that your worked on, that bugged you, what's unclear External use (API doc, ..) Quick start, issues, FAQ, examples .. Always include a table of contents or summary in your documentation, and keep in mind the reader approach follow these steps: SEARCH (meaningful titles, headings, keywords, tags) SCAN (the entire page without reading) NAVIGATE (links to related topics) RESULT (short words and more sentences) Write in simple english, anyone can do that, just be clear, simple and go straight to the point . The goal is to provide information (to help people), this is not an essay. Always share your text/draft with other team members and ask for feedbacks/reviews to improve clarity. Tip Avoid \"single points of failure\": don't be the silo of information of your team. If you are the only one able to fix/do some stuff then forget about holidays and relaxing time. Share knownledge and make everyone confortable to manage the source code. Docs as a Code Documentation as code is the process of creating and maintaining documentation in the same way as it is done for code. This involves usually version control software, Markdown formatting, and defined workflows. In this way the development and product teams work closely together, and easily share the knownledge. Another benefit is that your documents are always updated and synchronized with the development process (CI/CD integration). Writing tips by J. Schulgasser (Wix) Assume that your audience is already familir with industry/terms, but make sure to explain anything project-specific Use active words for any action performed by reader/system. Use the present tense for all situation (future tense is almost never required or desiderable). Use sentence case in headers. Capitalize proper names. Always capitalize acronyms. Do not use gerunds in task headers. Use numbered list to indicate steps in sequence and bulleted lists otherwise. For each steps describe where the step occurs, what to do, and what the expected result is (if applicable) Long procedures should be broken up into several smaller ones. If it is a feature name then should be capitalized. Link the first use to a definition if they are unfamiliar. Continually use the same terms for UI elements, system entities, and actions. A reader should be able to find all uses of the same word by performing a simple search. Emphasize important content using notes or bold text. Use bold for words that appear in the UI. Never use gender pronouns. Use links that contains the subject to which they are linking. Make use of automated spelling and grammars tools. Add useful alternative text for images. Links Tech Docs, how can I write them better","title":"Technical documentation"},{"location":"technical_documentation/#technical-documentation","text":"Forget the idea \"My code is self documented\", anyone who use your baseline need a good source of information about logical operations, design choice, guidelines, theory behind .. , troubleshooting, tips and tricks. Do not confuse writing clear - and clean - code, with the documentation process, they are both necessary but they have different goal. Remember that writing documentation is part of the task. Only once documentation is added the activity can be mark as done.","title":"Technical Documentation"},{"location":"technical_documentation/#how-to-write-technical-documents","text":"Identify your audience: Internal use (System design, architecture ..) Things that your worked on, that bugged you, what's unclear External use (API doc, ..) Quick start, issues, FAQ, examples .. Always include a table of contents or summary in your documentation, and keep in mind the reader approach follow these steps: SEARCH (meaningful titles, headings, keywords, tags) SCAN (the entire page without reading) NAVIGATE (links to related topics) RESULT (short words and more sentences) Write in simple english, anyone can do that, just be clear, simple and go straight to the point . The goal is to provide information (to help people), this is not an essay. Always share your text/draft with other team members and ask for feedbacks/reviews to improve clarity. Tip Avoid \"single points of failure\": don't be the silo of information of your team. If you are the only one able to fix/do some stuff then forget about holidays and relaxing time. Share knownledge and make everyone confortable to manage the source code.","title":"How to write technical documents"},{"location":"technical_documentation/#docs-as-a-code","text":"Documentation as code is the process of creating and maintaining documentation in the same way as it is done for code. This involves usually version control software, Markdown formatting, and defined workflows. In this way the development and product teams work closely together, and easily share the knownledge. Another benefit is that your documents are always updated and synchronized with the development process (CI/CD integration).","title":"Docs as a Code"},{"location":"technical_documentation/#writing-tips-by-j-schulgasser-wix","text":"Assume that your audience is already familir with industry/terms, but make sure to explain anything project-specific Use active words for any action performed by reader/system. Use the present tense for all situation (future tense is almost never required or desiderable). Use sentence case in headers. Capitalize proper names. Always capitalize acronyms. Do not use gerunds in task headers. Use numbered list to indicate steps in sequence and bulleted lists otherwise. For each steps describe where the step occurs, what to do, and what the expected result is (if applicable) Long procedures should be broken up into several smaller ones. If it is a feature name then should be capitalized. Link the first use to a definition if they are unfamiliar. Continually use the same terms for UI elements, system entities, and actions. A reader should be able to find all uses of the same word by performing a simple search. Emphasize important content using notes or bold text. Use bold for words that appear in the UI. Never use gender pronouns. Use links that contains the subject to which they are linking. Make use of automated spelling and grammars tools. Add useful alternative text for images.","title":"Writing tips by J. Schulgasser (Wix)"},{"location":"technical_documentation/#links","text":"Tech Docs, how can I write them better","title":"Links"},{"location":"tips_for_junior_devs/","text":"Tips for Junior Developers Being a young developer working in a team can be quite challenging and sometimes a lot of the pressure is put not only on tech related topics but also on social relationship. Find a good work-life balance. Don't forget to play outside, practice sports. In some ways it's more like competing in a long-distance race, sometimes it's ok tu run sprints, but keep steady and balanced for most of the time. Do the Right Things, Right! How to survive Focus Context switching comes at the cost of low developer productivity, reduced focus time, and high cognitive residue, all impacting the code quality and final product delivery. Few suggestions: Disable phone and chat notifications Set specific time-block only for coding or design Plan your daily tasks Less coffee, more sleep IDE and Tools Learn how to use them, their workflow, and the most used key shortcuts. Do not repeat yourselif (DRY) Learn a scripting language (Python, BASH ...) and make all repetive task executables via single command. Be reasonable about the time spent coding the scripts. Feedbacks Ask for feedbacks! Receive them a lot, they will help you to be a better developer (and also give them). Communication When talking or writing notes be simple, clear and effective (i.e. what to modify, where to apply these changes/impacts, why matters). Ask questions There are no stupid questions, ask about anything that is unclear to you, and write down notes. Don't be shy. Before start any task set a timeout for it (half-day, 2 days, ... whatever seems reasonable). If the timeout expires without getting a result then ask for help. Before start At beginning of a new planned activity/release a lot of information are exchanged between stackholders. These kick-off meetings build the foundation of your next coding weeks, pay attention to the big picture (scope) but also to details. Check that you have everything you need: Input documentation, task scheduling, sw architecture, coding rules/style. Information about third-party sw libraries, API, communication protocols ... Grants to access online resources like databases, sharepoints, email accounts, ticketing services ... Development tools, IDE, virtual machines, sw simulators. Check also their sw license. Access to sw repositories (starting version of the sourcecode). Have a clear idea of the final goal desired by stackholders/managers. Have a schedule of delivery plan (when-what). As you are working in a team, one nice thing is to plan your holiday months ahead, maybe away from delivery dates or stressful periods, be cool with your team-mates. Basic principles Honor deadlines and inform your team leader if there is the possibilty of delays (do not warn the day before, but almost a week before so managers can re-plan activities) Test any code change, even a simple one, on every possible scenario (not only the worst one). Check using simulators, test benches, any usefull tool available (and known their limitations). Share information, issues and update progress status Backup your data, code, doc, test enviroinment (better if on daily basis) Work Environment Top five reason that make developers unhappy of their job: Being stuck in problem solving Time pressure Bad code quality and coding practice Under-performing colleague Feeling inadegate with work Don't be unhappy, find a way to cope with these things. Ask to your mentor for tips! Be aware about the impostor syndrome . Links Habits of Efficient Developers Beyond Developer","title":"Tips for Junior Devs"},{"location":"tips_for_junior_devs/#tips-for-junior-developers","text":"Being a young developer working in a team can be quite challenging and sometimes a lot of the pressure is put not only on tech related topics but also on social relationship. Find a good work-life balance. Don't forget to play outside, practice sports. In some ways it's more like competing in a long-distance race, sometimes it's ok tu run sprints, but keep steady and balanced for most of the time. Do the Right Things, Right!","title":"Tips for Junior Developers"},{"location":"tips_for_junior_devs/#how-to-survive","text":"","title":"How to survive"},{"location":"tips_for_junior_devs/#focus","text":"Context switching comes at the cost of low developer productivity, reduced focus time, and high cognitive residue, all impacting the code quality and final product delivery. Few suggestions: Disable phone and chat notifications Set specific time-block only for coding or design Plan your daily tasks Less coffee, more sleep","title":"Focus"},{"location":"tips_for_junior_devs/#ide-and-tools","text":"Learn how to use them, their workflow, and the most used key shortcuts.","title":"IDE and Tools"},{"location":"tips_for_junior_devs/#do-not-repeat-yourselif-dry","text":"Learn a scripting language (Python, BASH ...) and make all repetive task executables via single command. Be reasonable about the time spent coding the scripts.","title":"Do not repeat yourselif (DRY)"},{"location":"tips_for_junior_devs/#feedbacks","text":"Ask for feedbacks! Receive them a lot, they will help you to be a better developer (and also give them).","title":"Feedbacks"},{"location":"tips_for_junior_devs/#communication","text":"When talking or writing notes be simple, clear and effective (i.e. what to modify, where to apply these changes/impacts, why matters).","title":"Communication"},{"location":"tips_for_junior_devs/#ask-questions","text":"There are no stupid questions, ask about anything that is unclear to you, and write down notes. Don't be shy. Before start any task set a timeout for it (half-day, 2 days, ... whatever seems reasonable). If the timeout expires without getting a result then ask for help.","title":"Ask questions"},{"location":"tips_for_junior_devs/#before-start","text":"At beginning of a new planned activity/release a lot of information are exchanged between stackholders. These kick-off meetings build the foundation of your next coding weeks, pay attention to the big picture (scope) but also to details. Check that you have everything you need: Input documentation, task scheduling, sw architecture, coding rules/style. Information about third-party sw libraries, API, communication protocols ... Grants to access online resources like databases, sharepoints, email accounts, ticketing services ... Development tools, IDE, virtual machines, sw simulators. Check also their sw license. Access to sw repositories (starting version of the sourcecode). Have a clear idea of the final goal desired by stackholders/managers. Have a schedule of delivery plan (when-what). As you are working in a team, one nice thing is to plan your holiday months ahead, maybe away from delivery dates or stressful periods, be cool with your team-mates.","title":"Before start"},{"location":"tips_for_junior_devs/#basic-principles","text":"Honor deadlines and inform your team leader if there is the possibilty of delays (do not warn the day before, but almost a week before so managers can re-plan activities) Test any code change, even a simple one, on every possible scenario (not only the worst one). Check using simulators, test benches, any usefull tool available (and known their limitations). Share information, issues and update progress status Backup your data, code, doc, test enviroinment (better if on daily basis)","title":"Basic principles"},{"location":"tips_for_junior_devs/#work-environment","text":"Top five reason that make developers unhappy of their job: Being stuck in problem solving Time pressure Bad code quality and coding practice Under-performing colleague Feeling inadegate with work Don't be unhappy, find a way to cope with these things. Ask to your mentor for tips! Be aware about the impostor syndrome .","title":"Work Environment"},{"location":"tips_for_junior_devs/#links","text":"Habits of Efficient Developers Beyond Developer","title":"Links"},{"location":"tips_for_team_leaders/","text":"Tips for Team Leaders If you\u2019re guiding a team of people towards an end goal, you\u2019re a team leader. Team leaders are responsible for everything from day-to-day operations to ensuring that their team members are best supported to achieve their goals. They provide guidance and instructions to a working group about a single or a portfolio of projects. They are in charge of delegating work, overseeing progress and coaching/mentorship team members as needed. Team Leads responsibilities include: Organizing work Communication (give context) Delegating Leading by example (link) Allocating and managing resources [(link)]](https://asana.com/resources/resource-allocation) Problem solving Managing project progress and reporting to stakeholders Coaching to improve team member skill sets and identifying areas for improvement Motivating team members to accomplish their goals Representing and advocating for team needs Transition to Lead-Role During transition from Dev to Tech-Lead be aware about your new duties and avoid these errors : Writing code all the time - You have also coordination and management task to do for the team, not just coding Making all the technical decisions - Leave some challenges to your team, use their know-how Do not care about people - Be aware about personal issue and feelings Assume that team know what they are doing - Take some time to share scopes, goal, direction with all the team members Ignore arguments and conflicts - Do not avoid difficult conversations Before accepting the role have a honest talk with the company management about what they expect from you (goals/duties) and what is your vision and your expectations. At the end of the day, it\u2019s about making good software with a team. Eryn O\u2019Neil Be prepared For this kind of role you'll need to develop some skills: Give context Good team leaders provide context, so team members understand why their work matters and how their work fits into the larger company vision. With that context, developers can more effectively prioritize tasks and ensure they deliver quality work at the right time. Moving work forward Once your team understands what goals they\u2019re supporting, they also need a clear way to visualize how they\u2019re going to get there. Clear communication Verbal and nonverbal (body language, facial expression ..) communication are very important for this role, people listen your words and look at you for a lot of reasons (help, guidance, confirmation ..). Learn how to translate tech topics and issue into real world example for non tech people. Simplify but still get to the point. Writing reports and exchange info with business units it's part of the role, it's better to learn basic financial management, find a common ground (and ask to your manager how their spreadsheets works). Organization Your team needs to be able to count on you and trust that you have everything under control. Delegating To delegate effectively, you must first understand each team member\u2019s strengths, weaknesses, and interests. Keep in mind that the team members may do things differently than you would have. Part of delegating is learning to let go and give your team members the reins. Do not forget: \u201dTrust, but verify.\u201d Problem-Solving If you\u2019re new to problem solving, try answering the following questions: How is the team going to approach the work? What\u2019s most important? What do they have to focus on? How will this decision impact the team? Time management Team leaders are masters on that, they have a great sense of how to prioritize work. Be aware that context-switching is a proven drag on productivity. Plan carefully your agenda and make sure to have some time slot without meetings in order to do your stuff. Workload management You\u2019re ultimately responsible for helping your team accomplish their goals. Track the progress and make sure no one is getting close to burnout. Team building Make sure everyone feels like part of the team, evaluate team performance and cheer your team members on. Be honest, be fair, practice empathy. Mentoring and coaching A big part of a team leader\u2019s role is to provide coaching, training, and mentoring where applicable. Ask everytime for feedbacks but also give them. Identify communication channels and ways to promote these exchanges and growth. Remember: \"Lead by example. Be the developer you wanna work with.\" Mastering in three steps Achieve tech lead mastery by: Facilitate . Help your team do their jobs Remove roadblocks Perceive the need Know the answers or where to find them Advocate . Keep the big picture in mind Advocate for your project: sometimes you have to say no Say no + always explain why Say no + but ... (if you are talking to managers) Motivate . Guide your team to the best possible result Your attitude is important. When complaining you\u2019re not finding a solution. Remember that teams are not immutable: adding people in a team change cultural values, relationships, \u2026 it becames a new team. Think about it when hiring! Also people who leave the team for a certain amount of time (sick leave, newborn, temporary moved \u2026) modify the team identity and roles inside. Leadership styles There are different way to lead a team, apply them carefully: Lessons learned Define the workflow Build and apply a process for your team. You\u2019ll need: Excellent onboarding and documentation Ongoing internal training Frequent code reviews and coaching Comprehensive test suites Consistent style and quality guidelines Keep track Be open, discuss everything, have meetings\u2026 but always write down the facts and share it to everyone involved (just in case when things go wrong). Avoid the \u201cRockstar-Developers\u201d They become bottlenecks (when on holiday, away, assigned to another project\u2026). They create dependent teams (other members stop looking for answers/thinking and just wait the rockstart point of view) They build knowledge silos (no shared information, full know-how to a single person) They eventually leave... Every team member must be interchangeable on the roles, or at least with a lower impact on delivery. Define a training path Create an onboard program to smooth the learning curve for new team members. Follow these principles: Have a plan Spend time with the trainee (pair programming) Give clear , relevant feedbacks and share your experience Give opportunity to deliberate practice Links How to lead 10 things great team leaders do Problem solving strategies Emotional intelligence skills Make the Right Thing the Easy Thing: Designing Processes Teams Will Actually Follow Using Agile Techniques to Build a More Inclusive Team","title":"Tips for Team Leaders"},{"location":"tips_for_team_leaders/#tips-for-team-leaders","text":"If you\u2019re guiding a team of people towards an end goal, you\u2019re a team leader. Team leaders are responsible for everything from day-to-day operations to ensuring that their team members are best supported to achieve their goals. They provide guidance and instructions to a working group about a single or a portfolio of projects. They are in charge of delegating work, overseeing progress and coaching/mentorship team members as needed. Team Leads responsibilities include: Organizing work Communication (give context) Delegating Leading by example (link) Allocating and managing resources [(link)]](https://asana.com/resources/resource-allocation) Problem solving Managing project progress and reporting to stakeholders Coaching to improve team member skill sets and identifying areas for improvement Motivating team members to accomplish their goals Representing and advocating for team needs","title":"Tips for Team Leaders"},{"location":"tips_for_team_leaders/#transition-to-lead-role","text":"During transition from Dev to Tech-Lead be aware about your new duties and avoid these errors : Writing code all the time - You have also coordination and management task to do for the team, not just coding Making all the technical decisions - Leave some challenges to your team, use their know-how Do not care about people - Be aware about personal issue and feelings Assume that team know what they are doing - Take some time to share scopes, goal, direction with all the team members Ignore arguments and conflicts - Do not avoid difficult conversations Before accepting the role have a honest talk with the company management about what they expect from you (goals/duties) and what is your vision and your expectations. At the end of the day, it\u2019s about making good software with a team. Eryn O\u2019Neil","title":"Transition to Lead-Role"},{"location":"tips_for_team_leaders/#be-prepared","text":"For this kind of role you'll need to develop some skills: Give context Good team leaders provide context, so team members understand why their work matters and how their work fits into the larger company vision. With that context, developers can more effectively prioritize tasks and ensure they deliver quality work at the right time. Moving work forward Once your team understands what goals they\u2019re supporting, they also need a clear way to visualize how they\u2019re going to get there. Clear communication Verbal and nonverbal (body language, facial expression ..) communication are very important for this role, people listen your words and look at you for a lot of reasons (help, guidance, confirmation ..). Learn how to translate tech topics and issue into real world example for non tech people. Simplify but still get to the point. Writing reports and exchange info with business units it's part of the role, it's better to learn basic financial management, find a common ground (and ask to your manager how their spreadsheets works). Organization Your team needs to be able to count on you and trust that you have everything under control. Delegating To delegate effectively, you must first understand each team member\u2019s strengths, weaknesses, and interests. Keep in mind that the team members may do things differently than you would have. Part of delegating is learning to let go and give your team members the reins. Do not forget: \u201dTrust, but verify.\u201d Problem-Solving If you\u2019re new to problem solving, try answering the following questions: How is the team going to approach the work? What\u2019s most important? What do they have to focus on? How will this decision impact the team? Time management Team leaders are masters on that, they have a great sense of how to prioritize work. Be aware that context-switching is a proven drag on productivity. Plan carefully your agenda and make sure to have some time slot without meetings in order to do your stuff. Workload management You\u2019re ultimately responsible for helping your team accomplish their goals. Track the progress and make sure no one is getting close to burnout. Team building Make sure everyone feels like part of the team, evaluate team performance and cheer your team members on. Be honest, be fair, practice empathy. Mentoring and coaching A big part of a team leader\u2019s role is to provide coaching, training, and mentoring where applicable. Ask everytime for feedbacks but also give them. Identify communication channels and ways to promote these exchanges and growth. Remember: \"Lead by example. Be the developer you wanna work with.\"","title":"Be prepared"},{"location":"tips_for_team_leaders/#mastering-in-three-steps","text":"Achieve tech lead mastery by: Facilitate . Help your team do their jobs Remove roadblocks Perceive the need Know the answers or where to find them Advocate . Keep the big picture in mind Advocate for your project: sometimes you have to say no Say no + always explain why Say no + but ... (if you are talking to managers) Motivate . Guide your team to the best possible result Your attitude is important. When complaining you\u2019re not finding a solution. Remember that teams are not immutable: adding people in a team change cultural values, relationships, \u2026 it becames a new team. Think about it when hiring! Also people who leave the team for a certain amount of time (sick leave, newborn, temporary moved \u2026) modify the team identity and roles inside.","title":"Mastering in three steps"},{"location":"tips_for_team_leaders/#leadership-styles","text":"There are different way to lead a team, apply them carefully:","title":"Leadership styles"},{"location":"tips_for_team_leaders/#lessons-learned","text":"","title":"Lessons learned"},{"location":"tips_for_team_leaders/#define-the-workflow","text":"Build and apply a process for your team. You\u2019ll need: Excellent onboarding and documentation Ongoing internal training Frequent code reviews and coaching Comprehensive test suites Consistent style and quality guidelines","title":"Define the workflow"},{"location":"tips_for_team_leaders/#keep-track","text":"Be open, discuss everything, have meetings\u2026 but always write down the facts and share it to everyone involved (just in case when things go wrong).","title":"Keep track"},{"location":"tips_for_team_leaders/#avoid-the-rockstar-developers","text":"They become bottlenecks (when on holiday, away, assigned to another project\u2026). They create dependent teams (other members stop looking for answers/thinking and just wait the rockstart point of view) They build knowledge silos (no shared information, full know-how to a single person) They eventually leave... Every team member must be interchangeable on the roles, or at least with a lower impact on delivery.","title":"Avoid the \u201cRockstar-Developers\u201d"},{"location":"tips_for_team_leaders/#define-a-training-path","text":"Create an onboard program to smooth the learning curve for new team members. Follow these principles: Have a plan Spend time with the trainee (pair programming) Give clear , relevant feedbacks and share your experience Give opportunity to deliberate practice","title":"Define a training path"},{"location":"tips_for_team_leaders/#links","text":"How to lead 10 things great team leaders do Problem solving strategies Emotional intelligence skills Make the Right Thing the Easy Thing: Designing Processes Teams Will Actually Follow Using Agile Techniques to Build a More Inclusive Team","title":"Links"},{"location":"wireshark_tcpdump/","text":"Wireshark A powerful opensource software for network traffic sniffing and analysis. A similar tool available only for Linux OS is tcpdump (explained on next section). Download according to your OS release: https://www.wireshark.org/download.html (For Windows OS it's highly recommended the portable version) Official documentation: https://www.wireshark.org/docs/wsug_html_chunked/ Overview Wireshark is a data capturing program (it uses pcap ) for different networking protocols. It can parse and display the packet fields and related information. Features: Data can be captured \"from the wire\" from a live network connection (Ethernet, IEEE 802.11, PPP, and loopback) or read from a file (trace) of already-captured packets. Captured network data can be browsed via a GUI, or via the terminal (command line) version of the utility, TShark. Captured files can be programmatically edited or converted via command-line switches to the \"editcap\" program. Data display can be refined using a display filter. Plug-ins can be created for dissecting new protocols.[23] VoIP calls in the captured traffic can be detected. If encoded in a compatible encoding, the media flow can even be played. Raw USB traffic can be captured.[24] Various settings, timers, and filters can be set to provide the facility of filtering the output of the captured traffic. Wireshark's native network trace file formats are the libpcap format read and written by libpcap, WinPcap, and Npcap, so it can exchange captured network traces with other applications that use the same format, including tcpdump and CA NetMaster, and the pcapng format read by newer versions of libpcap. How to sniff packets TODO Traffic analysis Acquire a new trace or load a previous acquisition (file with .pcap or .pcap.gz extension). Apply some filters in order to highlight the behavior of the devices and the flow of messages. Filters can be combined together via or , and operators. TCP filtering Show packets with specific source/destinatio/both ports: tcp.srcport==PORTNUMBER tcp.dstport==PORTNUMBER tcp.port==PORTNUMBER Show packets with specific properties: tcp.flags.reset==1 tcp.flags.syn==1 ... for TCP flags like ACK, SYN ... 000. .... .... = Reserved ...0 .... .... = Accurate ECN .... 0... .... = Congestion Window Reduced .... .0.. .... = ECN-Echo .... ..0. .... = Urgent .... ...0 .... = Acknowledgment .... .... 0... = Push .... .... .0.. = Reset .... .... ..0. = Syn .... .... ...0 = Fin Show packets related with a specific behavior (explore the analysis menu for more options) tcp.analysis.spurious_retransmission tcp.analysis.reused_ports ... IP filtering Show packets with specific source/destinatio/both IP address: ip.src==IPADDRESS ip.dst==IPADDRESS ip.addr==IPADDRESS Example This trace was acquired on the server side, during some monitoring tests. The user raised some concerns about a device disconnection. Logs on the device highlighted a disconnection indication on communication stack (due to RST packet sent by the server) server IP address=10.251.6.166 server PORT=1314 client device IP address=10.81.50.95 client PORT=41742 Workflow: Get the network topology and devices configuration Understand the meaning/theory about RST packet (when it's used and who send it): ```text List of reasons for the server to send the RST: A: Non-Existence TCP endpoint The client sends SYN to a non-existing TCP port or IP on the server side. The server will send a reset to the client. B: SYN matches the existing TCP endpoint The client sends SYN to an existing TCP endpoint, which means the same 5-tuple. The server will send a reset to the client. C: Accept Queue Full When the accept queue is full on the server side, the server will send a reset to the client. D: Half-Open Connections When the server restarts itself. Then all connections before would receive a reset from the server side. E: Firewall The firewall/routers could send a reset to the client or server (due to idle time or other reasons) Example: if there is a router doing NAT, especially a low end router with few resources, it will age the oldest TCP sessions first. To do this it sets the RST flag in the packet that effectively tells the receiving station to (very ungracefully) close the connection. this is done to save resources. F: Time-Wait Assassination When the client in the time-wait state, receives a message from the server-side, the client will send a reset to the server. G: Aborting Connection When the server aborts the connection, it could send a reset to the client The RST packets are only sent by the server. H: Connection Timeout If a TCP connection is idle for an extended period, one of the parties might send a reset packet to close the connection (in most applications, the socket connection has a timeout). Example: FTP server, if you connect to the server and just leave the connection without browsing or downloading files, the server will kick you off the connection, usually to allow others to be able to connect. I: Application protocol error TCP reset is sent when the peer (the other end of the connection) closes its socket while there is still unread data pending in its socket receive buffer. ``` Filter RST packets and look for a relation with other messages Check the presence of: \"Spurius retransmission\u201d \"Duplicated ack\u201d Open application source-code and verify how the TCP-stack is implemented (it's usually and external library like lwIP, ...). Verify that application manages connections as defined by protocol documentation. ```text TCP supports two types of connection releases like most connection-oriented transport protocols: GRACEFUL connection release In the Graceful connection release, the connection is open until both parties have closed their sides of the connection. The common way of terminating a TCP connection is by using the TCP header\u2019s FIN flag. This mechanism allows each host to release its own side of the connection individually. ABRUPT connection release In an Abrupt connection release, either one TCP entity is forced to close the connection or one user closes both directions of data transfer. An abrupt connection release is carried out when an RST segment is sent. ``` Tcpdump TODO Overview TODO How to use it TODO","title":"Wireshark and tcpdump"},{"location":"wireshark_tcpdump/#wireshark","text":"A powerful opensource software for network traffic sniffing and analysis. A similar tool available only for Linux OS is tcpdump (explained on next section). Download according to your OS release: https://www.wireshark.org/download.html (For Windows OS it's highly recommended the portable version) Official documentation: https://www.wireshark.org/docs/wsug_html_chunked/","title":"Wireshark"},{"location":"wireshark_tcpdump/#overview","text":"Wireshark is a data capturing program (it uses pcap ) for different networking protocols. It can parse and display the packet fields and related information. Features: Data can be captured \"from the wire\" from a live network connection (Ethernet, IEEE 802.11, PPP, and loopback) or read from a file (trace) of already-captured packets. Captured network data can be browsed via a GUI, or via the terminal (command line) version of the utility, TShark. Captured files can be programmatically edited or converted via command-line switches to the \"editcap\" program. Data display can be refined using a display filter. Plug-ins can be created for dissecting new protocols.[23] VoIP calls in the captured traffic can be detected. If encoded in a compatible encoding, the media flow can even be played. Raw USB traffic can be captured.[24] Various settings, timers, and filters can be set to provide the facility of filtering the output of the captured traffic. Wireshark's native network trace file formats are the libpcap format read and written by libpcap, WinPcap, and Npcap, so it can exchange captured network traces with other applications that use the same format, including tcpdump and CA NetMaster, and the pcapng format read by newer versions of libpcap.","title":"Overview"},{"location":"wireshark_tcpdump/#how-to-sniff-packets","text":"TODO","title":"How to sniff packets"},{"location":"wireshark_tcpdump/#traffic-analysis","text":"Acquire a new trace or load a previous acquisition (file with .pcap or .pcap.gz extension). Apply some filters in order to highlight the behavior of the devices and the flow of messages. Filters can be combined together via or , and operators.","title":"Traffic analysis"},{"location":"wireshark_tcpdump/#tcp-filtering","text":"Show packets with specific source/destinatio/both ports: tcp.srcport==PORTNUMBER tcp.dstport==PORTNUMBER tcp.port==PORTNUMBER Show packets with specific properties: tcp.flags.reset==1 tcp.flags.syn==1 ... for TCP flags like ACK, SYN ... 000. .... .... = Reserved ...0 .... .... = Accurate ECN .... 0... .... = Congestion Window Reduced .... .0.. .... = ECN-Echo .... ..0. .... = Urgent .... ...0 .... = Acknowledgment .... .... 0... = Push .... .... .0.. = Reset .... .... ..0. = Syn .... .... ...0 = Fin Show packets related with a specific behavior (explore the analysis menu for more options) tcp.analysis.spurious_retransmission tcp.analysis.reused_ports ...","title":"TCP filtering"},{"location":"wireshark_tcpdump/#ip-filtering","text":"Show packets with specific source/destinatio/both IP address: ip.src==IPADDRESS ip.dst==IPADDRESS ip.addr==IPADDRESS","title":"IP filtering"},{"location":"wireshark_tcpdump/#example","text":"This trace was acquired on the server side, during some monitoring tests. The user raised some concerns about a device disconnection. Logs on the device highlighted a disconnection indication on communication stack (due to RST packet sent by the server) server IP address=10.251.6.166 server PORT=1314 client device IP address=10.81.50.95 client PORT=41742 Workflow: Get the network topology and devices configuration Understand the meaning/theory about RST packet (when it's used and who send it): ```text List of reasons for the server to send the RST: A: Non-Existence TCP endpoint The client sends SYN to a non-existing TCP port or IP on the server side. The server will send a reset to the client. B: SYN matches the existing TCP endpoint The client sends SYN to an existing TCP endpoint, which means the same 5-tuple. The server will send a reset to the client. C: Accept Queue Full When the accept queue is full on the server side, the server will send a reset to the client. D: Half-Open Connections When the server restarts itself. Then all connections before would receive a reset from the server side. E: Firewall The firewall/routers could send a reset to the client or server (due to idle time or other reasons) Example: if there is a router doing NAT, especially a low end router with few resources, it will age the oldest TCP sessions first. To do this it sets the RST flag in the packet that effectively tells the receiving station to (very ungracefully) close the connection. this is done to save resources. F: Time-Wait Assassination When the client in the time-wait state, receives a message from the server-side, the client will send a reset to the server. G: Aborting Connection When the server aborts the connection, it could send a reset to the client The RST packets are only sent by the server. H: Connection Timeout If a TCP connection is idle for an extended period, one of the parties might send a reset packet to close the connection (in most applications, the socket connection has a timeout). Example: FTP server, if you connect to the server and just leave the connection without browsing or downloading files, the server will kick you off the connection, usually to allow others to be able to connect. I: Application protocol error TCP reset is sent when the peer (the other end of the connection) closes its socket while there is still unread data pending in its socket receive buffer. ``` Filter RST packets and look for a relation with other messages Check the presence of: \"Spurius retransmission\u201d \"Duplicated ack\u201d Open application source-code and verify how the TCP-stack is implemented (it's usually and external library like lwIP, ...). Verify that application manages connections as defined by protocol documentation. ```text TCP supports two types of connection releases like most connection-oriented transport protocols: GRACEFUL connection release In the Graceful connection release, the connection is open until both parties have closed their sides of the connection. The common way of terminating a TCP connection is by using the TCP header\u2019s FIN flag. This mechanism allows each host to release its own side of the connection individually. ABRUPT connection release In an Abrupt connection release, either one TCP entity is forced to close the connection or one user closes both directions of data transfer. An abrupt connection release is carried out when an RST segment is sent. ```","title":"Example"},{"location":"wireshark_tcpdump/#tcpdump","text":"TODO","title":"Tcpdump"},{"location":"wireshark_tcpdump/#overview_1","text":"TODO","title":"Overview"},{"location":"wireshark_tcpdump/#how-to-use-it","text":"TODO","title":"How to use it"}]}